package mountain;

import java.util.ArrayList;

import fractal.*;

public class Mountain extends Fractal {
	private ArrayList<Point> points = new ArrayList<Point>();
	private double r;

	/**
	 * Creates an object that handles Mountain's fractal.
	 * 
	 * @param length
	 *            the length of the triangle side
	 */
	public Mountain(Point p1, Point p2, Point p3, double r) {
		super();
		this.points.add(p1);
		this.points.add(p2);
		this.points.add(p3);
		this.r = r;

	}

	/**
	 * Returns the title.
	 * 
	 * @return the title
	 */
	public String getTitle() {
		return "Mountains triangel";
	}

	/**
	 * Draws the fractal.
	 * 
	 * @param turtle
	 *            the turtle graphic object
	 */
	public void draw(TurtleGraphics turtle) {
		fractalTriangle(turtle, order, points.get(0), points.get(1), points.get(2), r);
	}

	/*
	 * Recursive method: Draws a recursive line of the triangle.
	 */

	private void fractalTriangle(TurtleGraphics turtle, int order, Point p1, Point p2, Point p3, double r) {
		if (order == 0) {
			turtle.moveTo(p3.getX(), p3.getY());
			turtle.forwardTo(p1.getX(), p1.getY());
			turtle.forwardTo(p2.getX(), p2.getY());
			turtle.forwardTo(p3.getX(), p3.getY());
		} else {
			Point ph1 = new Point((p1.getX() + p2.getX()) / 2, (p1.getY() + p2.getY()) / 2 + (int) RandomUtilities.randFunc(r));
			Point ph2 = new Point((p2.getX() + p3.getX()) / 2, (p2.getY() + p3.getY()) / 2 + (int) RandomUtilities.randFunc(r));
			Point ph3 = new Point((p3.getX() + p1.getX()) / 2, (p3.getY() + p1.getY()) / 2 + (int) RandomUtilities.randFunc(r));

			fractalTriangle(turtle, order - 1, ph1, ph2, ph3);
			fractalTriangle(turtle, order - 1, ph1, p1, ph3);
			fractalTriangle(turtle, order - 1, ph1, ph2, p2);
			fractalTriangle(turtle, order - 1, p3, ph2, ph3);

		}
	}

}
